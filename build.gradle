plugins {
    id "org.sonarqube" version "2.8"
    id "maven-publish"
    id "signing"
    id "java"
    id "jacoco"
}

group 'de.mkammerer'
version '2.9-SNAPSHOT'

description 'Argon2 Binding for the JVM'

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.6.0'
    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
}

jar.enabled = false // Disable built-in jar task
task libsJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.output

    manifest {
        attributes(manifestAttributes())
    }
}

task libsSourcesJar(type: Jar, dependsOn: classes) {
    getArchiveClassifier().set('sources')
    from sourceSets.main.allJava
}

task libsJavadocJar(type: Jar, dependsOn: javadoc) {
    getArchiveClassifier().set('javadoc')
    from javadoc.destinationDir
}

task noLibsJar(type: Jar, dependsOn: classes) {
    getArchiveAppendix().set('nolibs')
    from sourceSets.main.output.classesDirs

    manifest {
        attributes(manifestAttributes())
    }
}

task noLibsSourcesJar(type: Jar, dependsOn: classes) {
    getArchiveAppendix().set('nolibs')
    getArchiveClassifier().set('sources')
    from sourceSets.main.allJava
}

task noLibsJavadocJar(type: Jar, dependsOn: javadoc) {
    getArchiveAppendix().set('nolibs')
    getArchiveClassifier().set('javadoc')
    from javadoc.destinationDir
}

// When running build, create all the JARs
build.dependsOn(libsJar, libsSourcesJar, libsJavadocJar, noLibsJar, noLibsSourcesJar, noLibsJavadocJar)

publishing {
    publications {
        libs(MavenPublication) {
            artifactId = 'argon2-jvm'

            from components.java
            artifact libsJar
            artifact libsSourcesJar
            artifact libsJavadocJar

            pom(this.&configurePom)
        }

        noLibs(MavenPublication) {
            artifactId = 'argon2-jvm-nolibs'

            from components.java
            artifact noLibsJar
            artifact noLibsSourcesJar
            artifact noLibsJavadocJar

            pom(this.&configurePom)
        }
    }

    repositories {
        maven {
            String releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            String snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.properties['sonatype.username']
                password = project.properties['sonatype.password']
            }
        }
    }
}

signing {
    sign publishing.publications.libs
    sign publishing.publications.noLibs
    required { gradle.taskGraph.hasTask("publish") }
}

sonarqube {
    properties {
        property "sonar.exclusions", "src/main/java/de/mkammerer/argon2/jna/*.java"
    }
}

private def configurePom(org.gradle.api.publish.maven.MavenPom pom) {
    pom.with {
        name = "Argon2 JVM"
        description = project.description
        url = "https://github.com/phxql/argon2-jvm"
        licenses {
            license {
                name = "GNU Lesser General Public License, Version 3"
                url = "https://www.gnu.org/licenses/lgpl-3.0.en.html"
            }
        }
        developers {
            developer {
                id = "phxql"
                name = "Moritz Kammerer"
                email = "kammerer.moritz@gmail.com"
                url = 'https://www.mkammerer.de/'
            }
        }
        scm {
            connection = "scm:git:git://github.com/phxql/argon2-jvm.git"
            developerConnection = "scm:git:git://github.com/phxql/argon2-jvm.git"
            url = "https://github.com/phxql/argon2-jvm"
        }
    }
}

/**
 * Creates the JAR attributes for the MANIFEST.MD
 */
private Map<String, Object> manifestAttributes() {
    return [
            'Automatic-Module-Name' : 'de.mkammerer.argon2'
    ]
}